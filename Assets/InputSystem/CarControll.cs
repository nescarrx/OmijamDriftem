//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/CarControll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarControll : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarControll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarControll"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""e095be61-7c90-4691-abcb-4bfa2d06e51d"",
            ""actions"": [
                {
                    ""name"": ""GoForward"",
                    ""type"": ""Button"",
                    ""id"": ""abd79953-4ade-49e0-859c-09bcc9f0b912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""40fff508-bbe5-4c66-b402-f1d77d7289c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20a6a23d-198b-45a6-85fd-79b500aa10b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cd24125-a5cc-41f5-844f-25db1f767a36"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_GoForward = m_Car.FindAction("GoForward", throwIfNotFound: true);
        m_Car_TurnLeft = m_Car.FindAction("TurnLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_Car_GoForward;
    private readonly InputAction m_Car_TurnLeft;
    public struct CarActions
    {
        private @CarControll m_Wrapper;
        public CarActions(@CarControll wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoForward => m_Wrapper.m_Car_GoForward;
        public InputAction @TurnLeft => m_Wrapper.m_Car_TurnLeft;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @GoForward.started -= m_Wrapper.m_CarActionsCallbackInterface.OnGoForward;
                @GoForward.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnGoForward;
                @GoForward.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnGoForward;
                @TurnLeft.started -= m_Wrapper.m_CarActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnTurnLeft;
                @TurnLeft.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnTurnLeft;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GoForward.started += instance.OnGoForward;
                @GoForward.performed += instance.OnGoForward;
                @GoForward.canceled += instance.OnGoForward;
                @TurnLeft.started += instance.OnTurnLeft;
                @TurnLeft.performed += instance.OnTurnLeft;
                @TurnLeft.canceled += instance.OnTurnLeft;
            }
        }
    }
    public CarActions @Car => new CarActions(this);
    public interface ICarActions
    {
        void OnGoForward(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
    }
}
